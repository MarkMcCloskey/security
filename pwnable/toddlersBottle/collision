Daddy told me about cool MD5 hash collision today. I wanna do something like
that too!

col.c:
#include <stdio.h>
#include <string.h>
unsigned long hashcode = 0x21DD09EC;//4 bytes needed
//returns unsigned long
unsigned long check_password(const char* p){
        int* ip = (int*)p;//treat the string as an int array
        int i;
        int res=0;
        for(i=0; i<5; i++){//only worried about first five entries
                res += ip[i];//so 4 bytes at a time to equal hashcode
        }
        return res;//res is int
}

int main(int argc, char* argv[]){
        if(argc<2){
                printf("usage : %s [passcode]\n", argv[0]);
                return 0;
        }
        if(strlen(argv[1]) != 20){
                printf("passcode length should be 20 bytes\n");
                return 0;
        }

        if(hashcode == check_password( argv[1] )){
                system("/bin/cat flag");
                return 0;
        }
        else
                printf("wrong passcode.\n");
        return 0;
}

Read something in as characters, which are a single byte each, then treat
groups of those characters as integers. Need to remember that the underlying
representation of characters are integers from 0 to 127. That means each of the
F's in the following list is actually \0x7F\0x7F...etc
FFFF FFFF FF-FF FFFF FFFF
|..|+|..|+|.-.|+|..|+|..| = 0x21DD09EC

