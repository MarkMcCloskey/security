Prompt: Mom? how can I pass my input to a computer program?

input.c:

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <arpa/inet.h>

int main(int argc, char* argv[], char* envp[]){
        printf("Welcome to pwnable.kr\n");
        printf("Let's see if you know how to give input to program\n");
        printf("Just give me correct inputs then you will get the flag :)\n");

        // argv
        if(argc != 100) return 0;             //need 100 arguments, thats fun
        if(strcmp(argv['A'],"\x00")) return 0;//arg 65 = \x00
        if(strcmp(argv['B'],"\x20\x0a\x0d")) return 0; //next arg = space LF CR
        printf("Stage 1 clear!\n");

        // stdio
        char buf[4];
        read(0, buf, 4); //read from std in
        if(memcmp(buf, "\x00\x0a\x00\xff", 4)) return 0; 
        read(2, buf, 4); //read from stderror
        if(memcmp(buf, "\x00\x0a\x02\xff", 4)) return 0;
        printf("Stage 2 clear!\n");

        // env
	//environment variable DEADBEEF=$'\xca\xfe\xba\xbe'
        if(strcmp("\xca\xfe\xba\xbe", getenv("\xde\xad\xbe\xef"))) return 0;
        printf("Stage 3 clear!\n");

        // file
        FILE* fp = fopen("\x0a", "r");//vim \
        if(!fp) return 0;
        if( fread(buf, 4, 1, fp)!=1 ) return 0;
        if( memcmp(buf, "\x00\x00\x00\x00", 4) ) return 0;
        fclose(fp);
        printf("Stage 4 clear!\n");

        // network
        int sd, cd;
        struct sockaddr_in saddr, caddr;
        sd = socket(AF_INET, SOCK_STREAM, 0);
        if(sd == -1){
                printf("socket error, tell admin\n");
                return 0;
        }
        saddr.sin_family = AF_INET;
        saddr.sin_addr.s_addr = INADDR_ANY;
        saddr.sin_port = htons( atoi(argv['C']) );//supply known port
						  //in arg 43
        if(bind(sd, (struct sockaddr*)&saddr, sizeof(saddr)) < 0){
                printf("bind error, use another port\n");
                return 1;
        }
        listen(sd, 1);
        int c = sizeof(struct sockaddr_in);
        cd = accept(sd, (struct sockaddr *)&caddr, (socklen_t*)&c);
        if(cd < 0){
                printf("accept error, tell admin\n");
                return 0;
        }
        if( recv(cd, buf, 4, 0) != 4 ) return 0;
        if(memcmp(buf, "\xde\xad\xbe\xef", 4)) return 0;//send deadbeef
							//may need to check endianess
        printf("Stage 5 clear!\n");

        // here's your flag
        system("/bin/cat flag");
        return 0;
}

This was the first challenge where I felt I NEEDED to write a script to solve.
It took a bit of time but was a good opportunity for me to learn the python pwn
library. I ended up writing the following:

input.py:
from pwn import *

#STAGE 4
with open('\x0a', 'w') as f:
        f.write('\x00'*4)
#STAGE 1
port = 10000
arglist = ["a"]*100
arglist[0] = "/home/input2/input"
arglist[ord('A')] = "\x00"
arglist[ord('B')] = "\x20\x0a\x0d"
arglist[ord('C')] = str(port)

#STAGE 3
env = { '\xde\xad\xbe\xef' : '\xca\xfe\xba\xbe' }

#STAGE 2 contained in stdin and stderr, 2 files created on server containing
#necessary input using command echo -ne 
p = process(argv=arglist, stdin=open("/tmp/inputBleh/stdin","rb"),stderr=open("/tmp/inputBleh/stderr","rb"),env=env)
s = p.recv()
print(s)

#STAGE 5
tcpmsg = '\xde\xad\xbe\xef'
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect(('', port)) #use localhost
sock.sendall(tcpmsg)
sock.close()

s = p.recv()
print(s)
s = p.recv()
print(s)
p.kill()
