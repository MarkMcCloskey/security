Prompt: We all make mistakes, let's move on. Don't take this too seriously, no
fancy hacking skill is required at all. This task is based on real event thanks
to dhmonkey.

mistake.c:
#include <stdio.h>
#include <fcntl.h>

#define PW_LEN 10
#define XORKEY 1//only potentially changes the last bit

void xor(char* s, int len){
        int i;
        for(i=0; i<len; i++){
                s[i] ^= XORKEY;
        }
}

int main(int argc, char* argv[]){

        int fd;
        //BAD PARENTHESIS should be ((fd=open(blahblah))<0)
	//effectively sets fd to 0, stdin.

	if(fd=open("/home/mistake/password",O_RDONLY,0400) < 0){ 
                printf("can't open password %d\n", fd);
                return 0;
        }

        printf("do not bruteforce...\n");
        sleep(time(0)%20);//deceptively put here to hide the fact the program
			  //is waiting for input from stdin

        char pw_buf[PW_LEN+1];
        int len;
        if(!(len=read(fd,pw_buf,PW_LEN) > 0)){ //input a password
                printf("read error\n");
                close(fd);
                return 0;
        }

        char pw_buf2[PW_LEN+1];
	printf("input password : ");
        scanf("%10s", pw_buf2);

        // xor your input
        xor(pw_buf2, 10); //now input something to match

        if(!strncmp(pw_buf, pw_buf2, PW_LEN)){
                printf("Password OK\n");
                system("/bin/cat flag\n");
        }
        else{
                printf("Wrong Password\n");
        }

        close(fd);
        return 0;
}

Important thing here is that the parenthesis are incorrect leading to the
password being able to be read from stdin. The next bit is that the XOR only
potentially changes the last bit of the input characters.
