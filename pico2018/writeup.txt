Forensics Warmup 1
------------------
Can you unzip this file for me and retreive the flag?
unzip flag.zip ->flag.jpg
flag in jpg. 
picoCTF{welcome_to_forensics}

Forensics Warmup 2
------------------
Hmm for some reason I can't open this png? Any ideas?
...literally double click the file
picoCTF{extensions_are_a_lie}

file flag.png -> it's a JPEG.

General Warmup 1
----------------
If I told you your grade was 0x41 in hexadecimal, what
would it be in ASCII?

See ASCII table -> A
picoCTF{A}

General Warmup 2
----------------
Can you convert the number 27(base 10) to binary(base 2)?

27/2 -> 13 remainder 1
13/2 -> 6 remainder 1
6/2 -> 3 remainder 0
3/2 -> 1 remainder 1
1/2 -> 0 remainder 1

picoCTF{11011}

General Warmup 3
----------------
What is 0x3D(base 16) in decimal(base 10)?

0x3D = 3 x 16^1 + 13 x 16^0 = (3 x 16) + (13 x 1)
= 48 + 13 = 61

picoCTF{61}

Resources
---------
We put together a bunch of resources to help you out on our website!
If you go over there, you might even find a flag!
<Link to resource page>
scroll down -> flag

picoCTF{xiexie_ni_lai_zheli}

Reversing Warmup 1
------------------
Throughout your journey you will have to run many programs. Can you
navigate to <file_path> on the shell server and run tihs program
to retreive the flag?

go there -> run program -> flag

picoCTF{welc0m3_t0_r3VeRs1nG}

Reversing Warmup 2
------------------
Can you decode the following string dGg0dF93NHNfczFtcEwz from 
base64 format to ASCII?

echo dGg0dF93NHNfczFtcEwz | base64 -d

picoCTF{th4t_w4s_s1mpl3}

Crypto Warmup 1
---------------
Crypto can often be done by hand, here's a message you got from a friend
llkjmlmpadkkc with the key of thisisalilkey. Can you use this table to
solve it?

The table kinda hurts my eyes...

thisisalilkey
llkjmlmpadkkc
secretmessage

picoCTF{SECRETMESSAGE}

Crypto Warmup 2
---------------
Cyptography doesn't have to be complicated, have you ever heard of something
called rot13? cvpbPGS{guvf_vf_pelcgb!}

echo "cvpbPGS{guvf_vf_pelcgb\!}" | tr '[A-Za-z]' '[N-ZA-Mn-za-m]'

picoCTF{this_is_crypto!}

grep 1
------
Can you find the flag in file? This would be really obnoxious to look through by hand see
if you can find a faster way.

grep picoCTF file

picoCTF{grep_and_you_will_find_d66382d8}

===
END NIGHT 1
===

nat cat
-------
Using netcat (nc) will be a necessity throughout your adventure. Can you connect to 
2018shell3.picoctf.com at port 22847 to get the flag?

nc 2018shell3.picoctf.com 22847 
picoCTF{NEtcat_iS_a_NEcESSiTy_69222dcc}

Here's Johnny!
--------------
Okay, so we found some important looking files on a linux computer. Maybe they can be used to
get a password to the process. Connect with nc 2018shell3.picoctf.com 40157.

Files given were passwd and shadow

cat passwd
>root:x:0:0:root:/root:/bin/bashroot
cat shadow
>root:$6$IGI9prWh$ZHToiAnzeD1Swp.zQzJ/Gv.iViy39EmjVsg3nsZlfejvrAjhmp5jY.1N6aRbjFJVQX8hHmTh7Oly3NzogaH8c1:17770:0:99999:7:::
unshadow passwd shadow > heresjohnny
//use john the ripper
john heresjohnny
>password1
nc 2018shell3.picoctf.com 40157
Username: root
Password: password1
>picoCTF{J0hn_1$_R1pp3d_1b25af80}

strings
-------
Can you find the flag in this file without actually running it?

Given file named strings

strings strings | grep picoCTF
>picoCTF{sTrIngS_sAVeS_Time_3f712a28}

pipe
----
During your adventure you will likely encounter a situation where you need to process data that you receive
over the network rather than through a file. Can you find a way to save the output from this program and
search for the flag? Connect with 2018shell3.picoctf.com 48696

nc 2018shell3.picoctf.com 48696 > pipe.txt
cat pipe.txt | uniq | grep pico
picoCTF{almost_like_mario_f617d1d7}

Inspect Me
----------
Inspect this code! http://2018shell3.picoctf.com:28831

Go to website, inspect, and find the html and javascript source.
picoCTF{ur_4_real_1nspect0r_g4dget_b4887011}

grep 2
------
This one is a little bit harder. Can you find the flag in /problems/grep-2_0_783d3e2c8ea2ebd3799ca6a5d28fc742/files on the shell server? Remember, grep is your friend.

Navigate to directory
grep -r pico
picoCTF{grep_r_and_you_will_find_24c911ab}

Aca-Shell-A
-----------
It's never a bad idea to brush up on those linux skills or even learn some new ones before you set off on 
this adventure! Connect with nc 2018shell3.picoctf.com 33158

This is a neat little game.
cd secret
rm in*
echo Drop it in!
cd ../executables
./dontLookHere
whoami
cd ..
cp /tmp/TopSecret passwords
cat TopSecret
picoCTF{CrUsHeD_It_9edaa84a}

Client Side is Still Bad
------------------------
I forgot my password again, but this time there doesn't seem to be a reset, can you help me?
http://2018shell3.picoctf.com:8249

inspect the body -> picoCTF{client_is_bad_9117e9}

Desrouleaux
-----------
Our network administrator is having some trouble handling the tickets for all of our incidents.
Can you help him out by answering all the questions? Connect with nc 2018shell3.picoctf.com 14079

Analyzing incidents.json

What is the most common source IP address? 38.165.106.4
How many unique destination IP addresses were targeted by the source IP 119.201.211.8? 2
What is the number of unique destination IP's a file is sent, on average, to two decimal places? 1.67
picoCTF{J4y_s0n_d3rUUUULo_4f3aae0d}

Logon
-----
I made a website so now you can log on to! I don't seem to have the admin password. See if you can't get
to the flag.

So, you can login just by pressing enter but it gives you a page that says you're in but can't see the flag.
I noticed they dropped a cookie that said admin was false. I changed it to true and reloaded the page.
picoCTF{l0g1ns_ar3nt_r34l_a280e12c}

Reading Between the Eyes
------------------------
Stego-Saurus hid a message for you in this image, can you retrieve it?

They hid a message in a png using least significant bit steganography. I did a google search for 
online decoders and found one. Sadly it didn't want to work with google so I had to use firefox.

https://stylesuxx.github.io/steganography/
picoCTF{r34d1ng_b37w33n_7h3_by73s}

Recovering From the Snap
------------------------
There used to be a bunch of animals here, what did Dr. Xernon do to them?

Given a .dd file to explore. Typically these are disk images but let's check.

file animals.dd -> DOS/MBR boot sector.
Alrighty, let's drop it in Autopsy
Deleted files -> theflag.jpg
picoCTF{th3_5n4p_happ3n3d}

admin panel
-----------
We captured some traffic logging into the admin panel, can you find the password?

Given data.pcap -> Typically pcaps are packet captures. Usually need Wireshark but just in case...

strings data.pcap | grep pico
picoCTF{n0ts3cur3_894a6546}

assembly-0
----------
What does asm0(0xd8, 0x7a) return?

intro_asm_rev.s:
.intel_syntax noprefix
.bits 32
	
.global asm0

asm0:
	push	ebp			# Save old base pointer
	mov	ebp,esp			# Store new base pointer
	mov	eax,DWORD PTR [ebp+0x8] # Move first arg to eax
	mov	ebx,DWORD PTR [ebp+0xc] # Move second arg to ebx
	mov	eax,ebx			# Move second arg to eax= return second arg
	mov	esp,ebp			# Return stack to before function call
	pop	ebp			# Restore base pointer
	ret

So the function asm0 just returns the second argument meaning the flag for this is 0x7a.

buffer overflow 0
----------------
Let's start off simple, can you overflow the right buffer in this program to get the flag?

vuln.c:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <signal.h>

#define FLAGSIZE_MAX 64

char flag[FLAGSIZE_MAX];

// Typically when buffer overflows are detected segmentation faults are thrown.
// If I trigger a seg fault here, it will print the flag for me.
void sigsegv_handler(int sig) {
  fprintf(stderr, "%s\n", flag);
  fflush(stderr);
  exit(1);
}

// 16 byte buffer, strcpy doesn't do length checking and will copy as many bytes
// onto the stack as I feed it. As long as I fill buf and then overflow the 
// stack canary, I should trigger the seg fault.
void vuln(char *input){
  char buf[16];
  strcpy(buf, input);
}

int main(int argc, char **argv){
  
  FILE *f = fopen("flag.txt","r");
  if (f == NULL) {
    printf("Flag File is Missing. Problem is Misconfigured, please contact an Admin if you are running this on the shell server.\n");
    exit(0);
  }
  fgets(flag,FLAGSIZE_MAX,f);
  signal(SIGSEGV, sigsegv_handler);
  
  gid_t gid = getegid();
  setresgid(gid, gid, gid);
  
  if (argc > 1) {
    vuln(argv[1]);
    printf("Thanks! Received: %s", argv[1]);
  }
  else
    printf("This program takes 1 argument.\n");
  return 0;
}

So, run the program and feed it something like 16 bytes for the buffer and then 8 more to
overwrite the canary should trigger the segfault/flag dump

./vuln AAAAAAAAAAAAAAAAAAAAAAA
picoCTF{ov3rfl0ws_ar3nt_that_bad_a54b012c}

caesar cipher 1
---------------
This is one of the older ciphers in the books, can you decrypt the message?

The Ceasar Cipher is typically just a character shift through the alphabet.

I'll just use an online resource to help decode.

https://cryptii.com/pipes/ceasar-cipher
Input message cycle through shift until 20 looks like a possible decryption.
picoCTF{justagoodoldcaesarcipherfwacbovv}

environ
-------
Sometimes you have to configure environment variables before executing a program. 
Can you find the flag we've hidden in an environment variable on the shell server?

printenv
picoCTF{eNv1r0nM3nT_v4r14Bl3_fL4g_3758492}

hertz
-----
Here's another simple cipher for you where we made a bunch of substitutions. Can you decrypt it?

The challenge name hertz leads you to think about frequency, character frequencies in English words
are well known. E is the most common, let's see if that helps.

Search for crypto frequency analysis online.
https://quipquip.com
picoCTF{substitution_ciphers_are_solvable_poounsvovg}

hex editor
---------
This cat has a secret to teach you.
